import e,{promises as n}from"fs";import o from"path";import t from"postcss";import s from"postcss-8.4";import r from"postcss-html";import{strict as c}from"assert";const noopPlugin=()=>({postcssPlugin:"noop-plugin",Rule(){}});noopPlugin.postcss=!0;const a="----------------------------------------";function formatCSSAssertError(e,n,o,t=!1){let s="";if(s+=`\n${e}\n\n`,n.message&&(s+=`message :\n  ${n.message}\n\n`),n.options)try{s+=`options :\n${JSON.stringify(n.options,null,2)}\n\n`}catch(e){}return s+=`output changed :\n${prettyDiff(o.message)}\n`,t||(s+="\n"+a),s}function formatWarningsAssertError(e,n,o,t,s=!1){let r="";if(r+=`\n${e}\n\n`,n.message&&(r+=`message :\n  ${n.message}\n\n`),n.options)try{r+=`options :\n${JSON.stringify(n.options,null,2)}\n\n`}catch(e){}return r+=`unexpected or missing warnings :\n+ actual ${o.length}\n- expected ${t}\n`,s||(o.forEach((e=>{r+=`\n[${e.plugin}]: ${e.text}`})),o.length&&(r+="\n"),r+="\n"+a),r}function prettyDiff(e){return e.replace(/[^\\](\\n)/gm,((e,n)=>e.replace(n," "))).replace(/(\\t)/gm,((e,n)=>e.replace(n," "))).replace(/\+$/gm,"").replace(/^Expected values to be strictly equal:\n/,"")}function formatGitHubActionAnnotation(e,n="error",t={}){let s="::"+n;const r=Object.keys(t).map((e=>{let n=String(t[e]);return"file"===e&&process.env.GITHUB_WORKSPACE&&(n=o.relative(process.env.GITHUB_WORKSPACE,o.resolve(n))),`${e}=${s=n,s.replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/]/g,"%5D").replace(/;/g,"%3B")}`;var s})).join(",");return r&&(s+=` ${r}`),`${s}::${c=e||"",c.replace(/\r/g,"%0D").replace(/\n/g,"%0A")}`;var c}function reduceInformationInCssSyntaxError(e){process.env.DEBUG||(delete e.source,e.input&&delete e.input.source,delete e.postcssNode)}const i=process.env.GITHUB_ACTIONS&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_NODE&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_OS;function postcssSyntax(e){return e.postcssSyntaxHTML?r():null}function postcssTape(r){let l=!1;{!0!==r.postcss&&(l=!0,i?console.log(formatGitHubActionAnnotation('postcss flag not set to "true" on exported plugin object',"error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss flag not set to "true"\n\n${a}`));const n=r();n.postcssPlugin&&"string"==typeof n.postcssPlugin||(l=!0,i?console.log(formatGitHubActionAnnotation('plugin name not set via "postcssPlugin"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name not set via "postcssPlugin"\n\n${a}`));const o=JSON.parse(e.readFileSync("./package.json").toString()),t=["css-has-pseudo","css-blank-pseudo","css-prefers-color-scheme","@csstools/css-has-pseudo-experimental"].includes(o.name);let s=o.name;if(s.startsWith("@")){s=o.name.split("/").slice(1).join("/")}s.startsWith("postcss-")||t||(l=!0,i?console.log(formatGitHubActionAnnotation('plugin name in package.json does not start with "postcss-"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name in package.json does not start with "postcss-"\n\n${a}`)),Object.keys(Object(o.dependencies)).includes("postcss")&&!("postcssTapeSelfTest"in r)&&(l=!0,i?console.log(formatGitHubActionAnnotation("postcss should only be a peer and/or dev dependency","error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss should only be a peer and/or dev dependency\n\n${a}`))}return async e=>{const p=new Set;for(const u in e){const f=e[u];f.before&&await f.before();const g=o.join(".","test",u.split(":")[0]),m=o.join(".","test",u.replace(/:/g,"."));let d="css";f.postcssSyntaxHTML&&(d="html");const S=`${g}.${d}`;let A=`${m}.expect.${d}`,$=`${m}.result.${d}`;f.expect&&(A=o.join(".","test",f.expect)),f.result&&($=o.join(".","test",f.result));const h=f.plugins??[r(f.options)],w=await n.readFile(S,"utf8");let y,b="";try{b=await n.readFile(A,"utf8")}catch(e){l=!0,b=!1,i?console.log(formatGitHubActionAnnotation(`${u}\n\nmissing or broken "expect" file: "${o.parse(A).base}"`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nmissing or broken "expect" file: "${o.parse(A).base}"\n\n${a}`))}let x=!1;try{y=await t(h).process(w,{from:S,to:$,map:{inline:!1,annotation:!1},syntax:postcssSyntax(f)})}catch(e){if(reduceInformationInCssSyntaxError(e),x=!0,f.exception&&f.exception.test(e.message))continue;throw e}!x&&f.exception&&(l=!0,i?console.log(formatGitHubActionAnnotation(`${u}\n\nexpected an exception but got none`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nexpected an exception but got none\n\n${a}`)));const E=y.css.toString();if(await n.writeFile($,E,"utf8"),process.env.REWRITE_EXPECTS&&n.writeFile(A,E,"utf8"),!1!==b){try{c.strictEqual(E,b)}catch(e){l=!0,i?console.log(formatGitHubActionAnnotation(formatCSSAssertError(u,f,e,!0),"error",{file:A,line:1,col:1})):(p.add(u),console.error(formatCSSAssertError(u,f,e)))}try{if(!f.postcssSyntaxHTML&&y.map.toJSON().sources.includes("<no source>"))throw new Error("Sourcemap is broken")}catch(e){l=!0;const n='\nThis is most likely a newly created PostCSS AST Node without a value for "source".\nsee :\n- https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#24-set-nodesource-for-new-nodes\n- https://postcss.org/api/#node-source';i?console.log(formatGitHubActionAnnotation(`${u}\n\nbroken source map: ${JSON.stringify(y.map.toJSON().sources)}\n${n}`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nbroken source map: ${JSON.stringify(y.map.toJSON().sources)}\n${n}\n\n${a}`))}f.after&&await f.after();try{const e=await n.readFile($,"utf8");if((await t([noopPlugin()]).process(e,{from:$,to:$,map:{inline:!1,annotation:!1},syntax:postcssSyntax(f)})).warnings().length)throw new Error("Unexpected warnings on second pass")}catch(e){l=!0,i?console.log(formatGitHubActionAnnotation(`${u}\n\nresult was not parsable with PostCSS.`,"error",{file:A,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nresult was not parsable with PostCSS.\n\n${a}`))}if(t([noopPlugin()]).version!==s([noopPlugin()]).version){const e=await s(h).process(w,{from:S,to:$,map:{inline:!1,annotation:!1}});try{c.strictEqual(e.css.toString(),E)}catch(e){reduceInformationInCssSyntaxError(e),l=!0,i?console.log(formatGitHubActionAnnotation("testing older PostCSS:\n"+formatCSSAssertError(u,f,e,!0),"error",{file:A,line:1,col:1})):(p.add(u),console.error("testing older PostCSS:\n"+formatCSSAssertError(u,f,e)))}}try{(y.warnings().length||f.warnings)&&c.strictEqual(y.warnings().length,f.warnings)}catch(e){l=!0,i?console.log(formatGitHubActionAnnotation(formatWarningsAssertError(u,f,y.warnings(),f.warnings??0,!0),"error",{file:A,line:1,col:1})):(p.add(u),console.error(formatWarningsAssertError(u,f,y.warnings(),f.warnings??0)))}}}if(p.size){console.error("\nunexpected failures:");for(const e of p.values())console.error("  - "+e)}l&&process.exit(1),console.warn("pass "+r().postcssPlugin)}}const l={postcssPlugin:"declaration-cloner",Declaration(e){"to-clone"===e.prop&&e.cloneBefore({prop:"cloned"})}},p={postcssPlugin:"rule-cloner",prepare(){const e=new WeakSet;return{RuleExit(n){e.has(n)||"to-clone"===n.selector&&(e.add(n),n.cloneBefore({selector:"cloned"}))}}}},u={postcssPlugin:"at-rule-cloner",prepare(){const e=new WeakSet;return{AtRuleExit(n){if(!e.has(n))return"to-clone"===n.params?(e.add(n),void n.cloneBefore({params:"cloned"})):"to-clone"===n.name?(e.add(n),void n.cloneBefore({name:"cloned"})):void 0}}}};export{u as atRuleClonerPlugin,l as declarationClonerPlugin,postcssTape,p as ruleClonerPlugin};
